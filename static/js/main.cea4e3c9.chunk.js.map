{"version":3,"sources":["utils.tsx","hooks/useGetFiles.tsx","hooks/useFetchData.tsx","store.tsx","components/DayLoader.tsx","components/Spinner.tsx","components/DataLoader.tsx","hooks/useName2Url.tsx","components/WordCount.tsx","components/Visualization.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultQueryConfig","enabled","retry","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","cacheTime","fetchData","_key","a","axios","get","data","status","Error","map","download_url","name","split","sort","b","localeCompare","formatData","Object","entries","key","wc","url","console","log","useStore","create","set","selectedWord","add","state","indexOf","concat","remove","filter","o","isActive","setSelectedWord","word","formatDate","date","format","parse","Date","DayLoader","load","className","useQuery","useFetchData","isError","isLoading","isSuccess","refetch","addDate","removeDate","selector","toogle","useCallback","toogleView","then","useEffect","onClick","Spinner","cn","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","DataLoader","n","loadN","error","QueryStatus","String","Success","i","res","Map","sources","forEach","useName2Url","WordCount","width","useMemo","reduce","Math","max","count","handleClick","style","Visualization","topk","cache","useQueryCache","name2url","queryData","all","getQueryData","dayData","nameData","Array","from","slice","length","href","target","rel","replace","queryCache","QueryCache","App","initialIsOpen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cea4e3c9.chunk.js","sourcesContent":["// import { add, format } from \"date-fns\";\nimport { QueryConfig } from \"react-query\";\n\n// export const getFormattedDate = (daysAdd = 0) => {\n//   const date = add(new Date(), { days: daysAdd });\n//   return format(date, \"YMMdd\");\n// };\n\nexport const defaultQueryConfig: QueryConfig<any> = {\n  enabled: false,\n  retry: false,\n  refetchOnMount: false,\n  refetchOnReconnect: false,\n  refetchOnWindowFocus: false,\n  cacheTime: 60000 * 60, // 1h\n};\n","import axios from \"axios\";\nimport { useQuery } from \"react-query\";\nimport { defaultQueryConfig } from \"../utils\";\n\nconst URL =\n  \"https://api.github.com/repos/renato145/peru_news/contents/data/summary?ref=main\";\n\ntype FetchData = { download_url: string; name: string }[];\ntype Props = (_key: string) => Promise<FetchData>;\n\nconst fetchData: Props = async (_key) => {\n  // await new Promise((r) => setTimeout(r, 2000));\n  const { data, status } = await axios.get<FetchData>(URL, {});\n  if (status !== 200) throw new Error(`status: ${status}`);\n  return data.map(({ download_url, name }) => ({\n    download_url,\n    name: name.split(\".json\")[0],\n  })).sort((a,b) => b.name.localeCompare(a.name));\n};\n\nexport const useGetFiles = () =>\n  useQuery<FetchData>(\"files\", fetchData, {\n    ...defaultQueryConfig,\n    enabled: true,\n    retry: true,\n  });\n","import axios from \"axios\";\nimport { useQuery } from \"react-query\";\nimport { SummaryData } from \"../types\";\nimport { defaultQueryConfig } from \"../utils\";\n\ntype FetchData = { [key: string]: { [word: string]: number } };\n\nconst formatData: (data: FetchData) => SummaryData = (data) =>\n  Object.entries(data).map(([key, wc]) => [key, Object.entries(wc)]);\n\ntype Props = (_key: string, props: { url: string }) => Promise<SummaryData>;\n\nconst fetchData: Props = async (_key, { url }) => {\n  console.log(`fetching summary data ${_key} ${url}`);\n  // await new Promise((r) => setTimeout(r, 2000));\n  const { data, status } = await axios.get<FetchData>(url);\n  if (status !== 200) throw new Error(`status: ${status}`);\n  return formatData(data);\n};\n\nexport const useFetchData = (url: string) =>\n  useQuery<SummaryData>([\"data\", { url }], fetchData, defaultQueryConfig);\n","import create from \"zustand\";\n\nexport type StoreProps = {\n  data: string[];\n  selectedWord: string;\n  add: (url: string) => void;\n  remove: (url: string) => void;\n  isActive: (url: string) => boolean;\n  setSelectedWord: (word: string) => void;\n};\n\nexport const useStore = create<StoreProps>((set, get) => ({\n  data: [],\n  selectedWord: \"\",\n  add: (url) =>\n    set((state) => {\n      if (state.data.indexOf(url) > -1) {\n        return {};\n      } else {\n        const data = state.data.concat(url);\n        return { data };\n      }\n    }),\n  remove: (url) =>\n    set((state) => {\n      const idx = state.data.indexOf(url);\n      if (idx > -1) {\n        const data = state.data.filter((o) => o !== url);\n        return { data };\n      } else {\n        return {};\n      }\n    }),\n  isActive: (url) => get().data.indexOf(url) > -1,\n  setSelectedWord: (word) => set({ selectedWord: word }),\n}));\n","import { parse, format } from \"date-fns\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useFetchData } from \"../hooks/useFetchData\";\nimport { StoreProps, useStore } from \"../store\";\n\ninterface Props {\n  date: string;\n  url: string;\n  load: boolean;\n  className?: string;\n}\n\nconst selector = (url: string) => (state: StoreProps) => ({\n  addDate: () => state.add(url),\n  removeDate: () => state.remove(url),\n  isActive: state.isActive(url),\n});\n\nconst formatDate = (date: string) =>\n  format(parse(date, \"yyyyMMdd\", new Date()), \"dd/MM/Y\");\n\nexport const DayLoader: React.FC<Props> = ({ date, url, load, className = \"\" }) => {\n  const { isError, isLoading, isSuccess, refetch } = useFetchData(url);\n  const { addDate, removeDate, isActive } = useStore(selector(url));\n\n  const toogle = useCallback(() => {\n    if (isActive || isError) removeDate();\n    else if (isSuccess) addDate();\n  }, [isActive, isError, removeDate, isSuccess, addDate]);\n\n  const toogleView = useCallback(() => {\n    if (isSuccess) toogle();\n    else if (isLoading) return;\n    else\n      refetch().then((o) => {\n        if (o) addDate();\n      });\n  }, [addDate, isLoading, isSuccess, refetch, toogle]);\n\n  useEffect(() => {\n    if (load) toogleView();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [load]);\n\n  return isError ? null : (\n    <div\n      className={`${className} p-2 transition cursor-pointer ${\n        isActive ? \"bg-green-600 text-gray-50\" : \"bg-gray-300\"\n      } ${isLoading ? \"animate-pulse\" : \"\"}`}\n      onClick={() => toogleView()}\n    >\n      <p className=\"font-semibold pointer-events-none\">{formatDate(date)}</p>\n    </div>\n  );\n};\n","import React from \"react\";\n\ninterface Props {\n  className?: string;\n}\n\nexport const Spinner: React.FC<Props> = ({ className }) => {\n  const cn = className ?? \"h-5 w-5\";\n\n  return (\n    <svg className={`animate-spin mr-3 ${cn}`} fill=\"none\" viewBox=\"0 0 24 24\">\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  );\n};\n","import React from \"react\";\nimport { QueryStatus } from \"react-query\";\nimport { useGetFiles } from \"../hooks/useGetFiles\";\nimport { DayLoader } from \"./DayLoader\";\nimport { Spinner } from \"./Spinner\";\n\ninterface Props {\n  n: number;\n  loadN: number;\n}\n\nexport const DataLoader: React.FC<Props> = ({ n, loadN }) => {\n  const { data, error, status } = useGetFiles();\n\n  return (\n    <div className=\"-mt-2 -ml-2 flex flex-wrap\">\n      {status === QueryStatus.Error ? (\n        <p>\n          Couldn't load files: <span>{String(error)}</span>\n        </p>\n      ) : status === QueryStatus.Success && data ? (\n        data.map(({download_url, name}, i) => (\n          <DayLoader key={i} className=\"mt-2 ml-2\" date={name} url={download_url} load={i < loadN} />\n        ))\n      ) : (\n        <div className=\"w-full flex justify-center\">\n          <Spinner className=\"h-10 w-10\" />\n        </div>\n      )}\n    </div>\n  );\n};\n","import axios from \"axios\";\nimport { useQuery } from \"react-query\";\nimport { defaultQueryConfig } from \"../utils\";\n\nconst URL =\n  \"https://raw.githubusercontent.com/renato145/peru_news/main/settings.json\";\n\ntype FetchData = { sources: { name: string; url: string }[] };\ntype Name2Url = Map<string, string>;\ntype Props = (_key: string) => Promise<Name2Url>;\n\nconst fetchData: Props = async (_key) => {\n  // await new Promise((r) => setTimeout(r, 2000));\n  const { data, status } = await axios.get<FetchData>(URL, {});\n  if (status !== 200) throw new Error(`status: ${status}`);\n  const res: Name2Url = new Map();\n  data.sources.forEach(({name, url}) => res.set(name, url));\n  return res;\n};\n\nexport const useName2Url = () =>\n  useQuery<Name2Url>(\"name2url\", fetchData, {\n    ...defaultQueryConfig,\n    enabled: true,\n    retry: true,\n  });\n","import React, { useMemo } from \"react\";\nimport { StoreProps, useStore } from \"../store\";\n\ninterface Props {\n  data: [string, number][];\n}\n\nconst selector = ({ selectedWord, setSelectedWord }: StoreProps) => ({\n  selectedWord,\n  setSelectedWord,\n});\n\nexport const WordCount: React.FC<Props> = ({ data }) => {\n  const { selectedWord, setSelectedWord } = useStore(selector);\n  const width = useMemo(\n    () => data.map(([_, count]) => count).reduce((a, b) => Math.max(a, b)),\n    [data]\n  );\n\n  const handleClick = (word: string) => {\n    if (selectedWord !== word) setSelectedWord(word);\n    else setSelectedWord(\"\");\n  };\n\n  return (\n    <div className=\"flex flex-col space-y-1\">\n      {data.map(([word, count], i) => (\n        <div\n          key={i}\n          className=\"relative flex items-center h-8\"\n          onClick={() => handleClick(word)}\n        >\n          <p\n            className={`absolute pl-2  cursor-pointer ${\n              selectedWord === word ? \"font-semibold\" : \"\"\n            }`}\n          >\n            {word} ({count})\n          </p>\n          <div\n            className={`h-full transition-all duration-300 cursor-pointer ${\n              selectedWord === word ? \"bg-blue-400\" : \"bg-blue-200\"\n            }`}\n            style={{ width: `${(100 * count) / width}%` }}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { useQueryCache } from \"react-query\";\nimport { useName2Url } from \"../hooks/useName2Url\";\nimport { StoreProps, useStore } from \"../store\";\nimport { SummaryData } from \"../types\";\nimport { Spinner } from \"./Spinner\";\nimport { WordCount } from \"./WordCount\";\n\nconst selector = (state: StoreProps) => state.data;\ninterface Props {\n  topk: number;\n}\n\nexport const Visualization: React.FC<Props> = ({ topk }) => {\n  const data = useStore(selector);\n  const cache = useQueryCache();\n  const { data: name2url } = useName2Url();\n  useName2Url();\n\n  const queryData = useMemo<SummaryData>(() => {\n    const all = new Map<string, Map<string, number>>();\n    data\n      .map((url) => cache.getQueryData<SummaryData>([\"data\", { url }]))\n      .forEach((dayData) => {\n        if (dayData) {\n          dayData.forEach(([name, wc]) => {\n            const nameData = all.get(name) ?? new Map<string, number>();\n            wc.forEach(([word, count]) => {\n              nameData.set(word, (nameData.get(word) ?? 0) + count);\n            });\n            all.set(name, nameData);\n          });\n        }\n      });\n    return Array.from(all).map(([name, data]) => [\n      name,\n      Array.from(data)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, topk),\n    ]);\n  }, [cache, data, topk]);\n\n  return (\n    <div className=\"mt-2\">\n      {queryData.length === 0 ? (\n        <div className=\"mt-10 flex justify-center\">\n          <Spinner className=\"h-14 w-14\" />\n        </div>\n      ) : (\n        <>\n          <p className=\"font-semibold\">Loaded data: {data.length}</p>\n          <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-4\">\n            {queryData.map(([name, wc], i) => (\n              <div key={i} className=\"px-4 py-2 bg-blue-50\">\n                <a\n                  className=\"capitalize text-lg font-semibold\"\n                  href={name2url?.get(name)}\n                  target=\"_black\"\n                  rel=\"noopener\"\n                >\n                  {name.replace(\"_\", \" \")}\n                </a>\n                <div className=\"my-2\">\n                  <WordCount data={wc} />\n                </div>\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QueryCache, ReactQueryCacheProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query-devtools\";\nimport { DataLoader } from \"./components/DataLoader\";\nimport { Visualization } from \"./components/Visualization\";\n\nconst queryCache = new QueryCache();\n\nexport const App: React.FC = () => {\n  return (\n    <ReactQueryCacheProvider queryCache={queryCache}>\n      <div className=\"m-4\">\n        <DataLoader n={10} loadN={5} />\n        <Visualization topk={10} />\n      </div>\n      <ReactQueryDevtools initialIsOpen />\n    </ReactQueryCacheProvider>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}