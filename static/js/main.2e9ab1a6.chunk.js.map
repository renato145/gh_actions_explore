{"version":3,"sources":["utils.tsx","hooks/useFetchData.tsx","store.tsx","components/DayLoader.tsx","components/DataLoader.tsx","components/Spinner.tsx","components/WordCount.tsx","components/Visualization.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultQueryConfig","enabled","retry","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","cacheTime","formatData","data","Object","entries","map","key","wc","useFetchData","_key","a","date","console","log","Promise","r","setTimeout","url","axios","get","status","Error","useStore","create","set","selectedWord","add","state","indexOf","concat","remove","filter","o","isActive","setSelectedWord","word","formatDate","format","parse","Date","DayLoader","load","className","useQuery","isError","isLoading","isSuccess","refetch","addDate","removeDate","selector","toogle","useCallback","toogleView","then","useEffect","onClick","DataLoader","n","loadN","dates","Array","fill","_","i","daysAdd","days","getFormattedDate","d","Spinner","cn","viewBox","cx","cy","stroke","stroke-width","WordCount","width","useMemo","reduce","b","Math","max","count","handleClick","style","Visualization","topk","cache","useQueryCache","queryData","all","Map","getQueryData","forEach","dayData","name","nameData","from","sort","slice","length","replace","queryCache","QueryCache","App","initialIsOpen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e9ab1a6.chunk.js","sourcesContent":["import { add, format } from \"date-fns\";\nimport { QueryConfig } from \"react-query\";\n\nexport const getFormattedDate = (daysAdd = 0) => {\n  const date = add(new Date(), { days: daysAdd });\n  return format(date, \"YMMdd\");\n};\n\nexport const defaultQueryConfig: QueryConfig<any> = {\n  enabled: false,\n  retry: false,\n  refetchOnMount: false,\n  refetchOnReconnect: false,\n  refetchOnWindowFocus: false,\n  cacheTime: 60000 * 60,\n};\n","import axios from \"axios\";\nimport { SummaryData } from \"../types\";\n\nconst DATA_URL =\n  \"https://raw.githubusercontent.com/renato145/peru_news/main/data/summary/\";\n\ntype FetchData = { [key: string]: { [word: string]: number } };\n\nconst formatData: (data: FetchData) => SummaryData = (data) =>\n  Object.entries(data).map(([key, wc]) => [key, Object.entries(wc)]);\n\ntype Props = (_key: string, props: { date: string }) => Promise<SummaryData>;\n\nexport const useFetchData: Props = async (_key, { date }) => {\n  console.log(`fetching summary data ${_key} ${date}`);\n  await new Promise((r) => setTimeout(r, 2000));\n  const url = `${DATA_URL}${date}.json`;\n  const { data, status } = await axios.get<FetchData>(url);\n  if (status !== 200) throw new Error(`status: ${status}`);\n  return formatData(data);\n};\n","import create from \"zustand\";\n\nexport type StoreProps = {\n  data: string[];\n  selectedWord: string;\n  add: (date: string) => void;\n  remove: (date: string) => void;\n  isActive: (date: string) => boolean;\n  setSelectedWord: (word: string) => void;\n};\n\nexport const useStore = create<StoreProps>((set, get) => ({\n  data: [],\n  selectedWord: \"\",\n  add: (date) =>\n    set((state) => {\n      if (state.data.indexOf(date) > -1) {\n        return {};\n      } else {\n        const data = state.data.concat(date);\n        return { data };\n      }\n    }),\n  remove: (date) =>\n    set((state) => {\n      const idx = state.data.indexOf(date);\n      if (idx > -1) {\n        const data = state.data.filter((o) => o !== date);\n        return { data };\n      } else {\n        return {};\n      }\n    }),\n  isActive: (date) => get().data.indexOf(date) > -1,\n  setSelectedWord: (word) => set({ selectedWord: word }),\n}));\n","import { parse, format } from \"date-fns\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useFetchData } from \"../hooks/useFetchData\";\nimport { StoreProps, useStore } from \"../store\";\nimport { SummaryData } from \"../types\";\nimport { defaultQueryConfig } from \"../utils\";\n\ninterface Props {\n  date: string;\n  load: boolean;\n  className?: string;\n}\n\nconst selector = (date: string) => (state: StoreProps) => ({\n  addDate: () => state.add(date),\n  removeDate: () => state.remove(date),\n  isActive: state.isActive(date),\n});\n\nconst formatDate = (date: string) => format(parse(date, \"yyyyMMdd\", new Date()), \"dd/MM/Y\");\n\nexport const DayLoader: React.FC<Props> = ({ date, load, className = \"\" }) => {\n  const { isError, isLoading, isSuccess, refetch } = useQuery<SummaryData>(\n    [\"data\", { date }],\n    useFetchData,\n    defaultQueryConfig\n  );\n  const { addDate, removeDate, isActive } = useStore(selector(date));\n\n  const toogle = useCallback(() => {\n    if (isActive || isError) removeDate();\n    else if (isSuccess) addDate();\n  }, [isActive, isError, removeDate, isSuccess, addDate]);\n\n  const toogleView = useCallback(() => {\n    if (isSuccess) toogle();\n    else if (isLoading) return;\n    else\n      refetch().then((o) => {\n        if (o) addDate();\n      });\n  }, [addDate, isLoading, isSuccess, refetch, toogle]);\n\n  useEffect(() => {\n    if (load) toogleView();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [load]);\n\n  return isError ? null : (\n    <div\n      className={`${className} p-2 transition cursor-pointer ${\n        isActive ? \"bg-green-600 text-gray-50\" : \"bg-gray-300\"\n      } ${isLoading ? \"animate-pulse\" : \"\"}`}\n      onClick={() => toogleView()}\n    >\n      <p className=\"font-semibold pointer-events-none\">{formatDate(date)}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { getFormattedDate } from \"../utils\";\nimport { DayLoader } from \"./DayLoader\";\n\ninterface Props {\n  n: number;\n  loadN: number;\n}\n\nexport const DataLoader: React.FC<Props> = ({ n, loadN }) => {\n  const dates = Array(n)\n    .fill(0)\n    .map((_, i) => getFormattedDate(-i));\n\n  return (\n    <div className=\"-mt-2 -ml-2 flex flex-wrap\">\n      {dates.map((d, i) => (\n        <DayLoader key={i} className=\"mt-2 ml-2\" date={d} load={i < loadN} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\n\ninterface Props {\n  className?: string;\n}\n\nexport const Spinner: React.FC<Props> = ({ className }) => {\n  const cn = className ?? \"h-5 w-5\";\n\n  return (\n    <svg className={`animate-spin mr-3 ${cn}`} fill=\"none\" viewBox=\"0 0 24 24\">\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        stroke-width=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { StoreProps, useStore } from \"../store\";\n\ninterface Props {\n  data: [string, number][];\n}\n\nconst selector = ({ selectedWord, setSelectedWord }: StoreProps) => ({\n  selectedWord,\n  setSelectedWord,\n});\n\nexport const WordCount: React.FC<Props> = ({ data }) => {\n  const { selectedWord, setSelectedWord } = useStore(selector);\n  const width = useMemo(\n    () => data.map(([_, count]) => count).reduce((a, b) => Math.max(a, b)),\n    [data]\n  );\n\n  const handleClick = (word: string) => {\n    if (selectedWord !== word) setSelectedWord(word);\n    else setSelectedWord(\"\");\n  };\n\n  return (\n    <div className=\"flex flex-col space-y-1\">\n      {data.map(([word, count], i) => (\n        <div\n          key={i}\n          className=\"relative flex items-center h-8\"\n          onClick={() => handleClick(word)}\n        >\n          <p\n            className={`absolute pl-2 pointer-events-none ${\n              selectedWord === word ? \"font-semibold\" : \"\"\n            }`}\n          >\n            {word} ({count})\n          </p>\n          <div\n            className={`h-full transition-all duration-300 ${\n              selectedWord === word ? \"bg-blue-400\" : \"bg-blue-200\"\n            }`}\n            style={{ width: `${(100 * count) / width}%` }}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { useQueryCache } from \"react-query\";\nimport { StoreProps, useStore } from \"../store\";\nimport { SummaryData } from \"../types\";\nimport { Spinner } from \"./Spinner\";\nimport { WordCount } from \"./WordCount\";\n\nconst selector = (state: StoreProps) => state.data;\ninterface Props {\n  topk: number;\n}\n\nexport const Visualization: React.FC<Props> = ({ topk }) => {\n  const data = useStore(selector);\n  const cache = useQueryCache();\n\n  const queryData = useMemo<SummaryData>(() => {\n    const all = new Map<string, Map<string, number>>();\n    data\n      .map((date) => cache.getQueryData<SummaryData>([\"data\", { date }]))\n      .forEach((dayData) => {\n        if (dayData) {\n          dayData.forEach(([name, wc]) => {\n            const nameData = all.get(name) ?? new Map<string, number>();\n            wc.forEach(([word, count]) => {\n              nameData.set(word, (nameData.get(word) ?? 0) + count);\n            });\n            all.set(name, nameData);\n          });\n        }\n      });\n    return Array.from(all).map(([name, data]) => [\n      name,\n      Array.from(data)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, topk),\n    ]);\n  }, [cache, data, topk]);\n\n  return (\n    <div className=\"mt-2\">\n      {queryData.length === 0 ? (\n        <div className=\"mt-10 flex justify-center\">\n          <Spinner className=\"h-14 w-14 text-gray-500\" />\n        </div>\n      ) : (\n        <>\n          <p className=\"font-semibold\">Loaded data: {data.length}</p>\n          <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-4\">\n            {queryData.map(([name, wc], i) => (\n              <div key={i} className=\"px-4 py-2 bg-blue-50\">\n                <p className=\"capitalize text-lg font-semibold\">\n                  {name.replace(\"_\", \" \")}\n                </p>\n                <div className=\"my-2\">\n                  <WordCount data={wc} />\n                </div>\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QueryCache, ReactQueryCacheProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query-devtools\";\nimport { DataLoader } from \"./components/DataLoader\";\nimport { Visualization } from \"./components/Visualization\";\n\nconst queryCache = new QueryCache();\n\nexport const App: React.FC = () => {\n  return (\n    <ReactQueryCacheProvider queryCache={queryCache}>\n      <div className=\"m-4\">\n        <DataLoader n={10} loadN={5} />\n        <Visualization topk={10} />\n      </div>\n      <ReactQueryDevtools initialIsOpen />\n    </ReactQueryCacheProvider>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}